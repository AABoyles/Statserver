#!/usr/bin/python

import pandas, numpy, sklearn.decomposition, json
from flask import Flask
app = Flask(__name__)

@app.route("/mean")
def mean():
    df = pandas.read_csv(request.files['file'])
    return json.dumps()

@app.route("/median")
def median():
    df = pandas.read_csv(request.files['file'])
    return json.dumps()

@app.route("/mode")
def mode():
    df = pandas.read_csv(request.files['file'])
    return json.dumps()

@app.route("/stddev")
def stddev():
    df = pandas.read_csv(request.files['file'])
    return json.dumps()

@app.route("/meandev")
def meandev():
    df = pandas.read_csv(request.files['file'])
    return json.dumps()

@app.route("/lm")
def lm():
    df = pandas.read_csv(request.files['file'])
    Y = df.Alcohol[:-1]
    X = df.Tobacco[:-1]
    result = sm.OLS( Y, X ).fit()
    return json.dumps(result.summary())

@app.route("/k-means")
def k_means():
    return "y = a + bx + e"

@app.route("/ward")
def ward():
    return "y = a + bx + e"

@app.route("/hca")
def hca():
    return "y = a + bx + e"

@app.route("/nmf")
def nmf():
    df = numpy.random.uniform(size = [2, 2])
    model = sklearn.decomposition.ProjectedGradientNMF(n_components = 4)
    W = model.fit_transform(df)
    H = model.components_
    return json.dumps({
        "W":W.tolist(),
        "H":model.components_.tolist(),
        "error":model.reconstruction_err_})

@app.route("/")
def home():
    return "This is a Statistics Server."

if __name__ == "__main__":
    app.run()
